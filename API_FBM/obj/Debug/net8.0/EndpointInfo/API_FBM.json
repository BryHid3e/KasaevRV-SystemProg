{
  "openapi": "3.0.1",
  "info": {
    "title": "API для управления пользователями",
    "description": "API для выполнения операций с пользователями в базе данных Supabase",
    "contact": {
      "name": "Администратор API",
      "email": "admin@example.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Users/test-connection": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Проверка соединения с базой данных",
        "description": "Тестовый метод для проверки соединения с Supabase",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Получить список всех пользователей",
        "description": "Возвращает полный список всех пользователей из базы данных\r\n\r\nПример запроса:\r\n            \r\n    GET /api/Users",
        "responses": {
          "200": {
            "description": "Возвращает список пользователей",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Создать нового пользователя",
        "description": "Создает нового пользователя в базе данных\r\n\r\nПример запроса:\r\n            \r\n    POST /api/Users\r\n    {\r\n       \"name\": \"Иван Иванов\",\r\n       \"login\": \"ivan\",\r\n       \"password\": \"секретный_пароль\",\r\n       \"age\": 30\r\n    }",
        "requestBody": {
          "description": "Данные нового пользователя",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Возвращает созданного пользователя",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Если данные пользователя некорректны",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      }
    },
    "/api/Users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Получить пользователя по ID",
        "description": "Возвращает информацию о конкретном пользователе по его ID\r\n\r\nПример запроса:\r\n            \r\n    GET /api/Users/5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID пользователя (целое число)",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Возвращает данные пользователя",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "Если пользователь не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Обновить данные пользователя",
        "description": "Полностью обновляет данные существующего пользователя\r\n\r\nПример запроса:\r\n            \r\n    PUT /api/Users/5\r\n    {\r\n       \"id\": 5,\r\n       \"name\": \"Иван Петров\",\r\n       \"login\": \"ivan_petrov\",\r\n       \"password\": \"новый_пароль\",\r\n       \"age\": 35\r\n    }\r\n            \r\nВажно: ID в URL должен совпадать с ID в теле запроса",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID пользователя для обновления",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Новые данные пользователя",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Возвращает обновленного пользователя",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Если ID в URL не соответствует ID в теле запроса",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Если пользователь не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Удалить пользователя",
        "description": "Удаляет пользователя из базы данных по указанному ID\r\n\r\nПример запроса:\r\n            \r\n    DELETE /api/Users/5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID пользователя для удаления",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Если пользователь успешно удален"
          },
          "404": {
            "description": "Если пользователь не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      }
    },
    "/api/Users/{id}/name": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Обновить имя пользователя",
        "description": "Обновляет только имя существующего пользователя\r\n\r\nПример запроса:\r\n            \r\n    PATCH /api/Users/5/name\r\n    \"Новое Имя\"\r\n            \r\nТело запроса - строка в кавычках с новым именем",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID пользователя",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Новое имя пользователя",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Возвращает пользователя с обновленным именем",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "Если пользователь не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      }
    },
    "/api/Users/{id}/login": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Обновить логин пользователя",
        "description": "Обновляет только логин существующего пользователя\r\n\r\nПример запроса:\r\n            \r\n    PATCH /api/Users/5/login\r\n    \"new_login\"\r\n            \r\nТело запроса - строка в кавычках с новым логином",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID пользователя",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Новый логин пользователя",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Возвращает пользователя с обновленным логином",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "Если пользователь не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      }
    },
    "/api/Users/{id}/password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Обновить пароль пользователя",
        "description": "Обновляет только пароль существующего пользователя\r\n\r\nПример запроса:\r\n            \r\n    PATCH /api/Users/5/password\r\n    \"новый_пароль\"\r\n            \r\nТело запроса - строка в кавычках с новым паролем",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID пользователя",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Новый пароль пользователя",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Возвращает пользователя с обновленным паролем",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "Если пользователь не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      }
    },
    "/api/Users/{id}/age": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Обновить возраст пользователя",
        "description": "Обновляет только возраст существующего пользователя\r\n\r\nПример запроса:\r\n            \r\n    PATCH /api/Users/5/age\r\n    25\r\n            \r\nТело запроса - целое число (новый возраст)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID пользователя",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Новый возраст пользователя",
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Возвращает пользователя с обновленным возрастом",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "Если пользователь не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Если произошла внутренняя ошибка сервера"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ClientOptions": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "queryParams": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "CreateUserDto": {
        "required": [
          "age",
          "login",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "login": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          }
        ],
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": { }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "User": {
        "required": [
          "age",
          "createdAt",
          "id",
          "login",
          "name",
          "password"
        ],
        "type": "object",
        "properties": {
          "baseUrl": {
            "type": "string",
            "nullable": true
          },
          "requestClientOptions": {
            "$ref": "#/components/schemas/ClientOptions"
          },
          "tableName": {
            "type": "string",
            "readOnly": true
          },
          "primaryKey": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "login": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserModel"
          }
        ],
        "additionalProperties": false
      },
      "UserModel": {
        "required": [
          "age",
          "createdAt",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      }
    }
  }
}